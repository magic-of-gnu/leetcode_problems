from collections import defaultdict

class Solution:
    def pacificAtlantic(self, heights):

        m, n = len(heights), len(heights[0])

        def dfs(heights, flows, ii, jj, val, seen):

            if (ii,jj) in seen:
                return

            seen.add((ii,jj))

            flows[ii][jj] |= 2**val

            for (di, dj) in [(-1,0), (0,1), (1,0), (0,-1)]:
                x, y = ii+di, jj+dj
                if not (0 <= x < m and 0 <= y < n):
                    continue

                if heights[x][y] >= heights[ii][jj]:
                    dfs(heights, flows, x, y, val, seen)

        flows = [[0]*n for _ in range(m)]
        a_visited = set()
        p_visited = set()

        for jj in range(n):
            dfs(heights, flows,   0,  jj, 0, p_visited)
            dfs(heights, flows, m-1,  jj, 1, a_visited)

        for ii in range(m):
            dfs(heights, flows,  ii,   0, 0, p_visited)
            dfs(heights, flows,  ii, n-1, 1, a_visited)

        results = list()
        for ii in range(m):
            for jj in range(n):
                if flows[ii][jj] == 3:
                    results.append([ii,jj])

        return results



if __name__ == "__main__":
    heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
    Output = [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]

    heights = [[12,9,18,4,1,4,8,8,9,7,15,17,2,17,17],[1,0,17,15,11,10,10,7,8,1,16,10,11,14,19],[0,19,7,4,9,6,4,5,4,7,0,13,3,16,6],[18,18,10,16,12,13,3,6,11,5,7,5,16,15,19],[0,9,16,15,17,11,1,1,17,14,2,11,18,0,6],[14,18,2,10,2,0,8,0,11,10,4,16,1,10,19],[5,16,3,4,5,10,5,14,15,15,18,0,15,12,15],[4,8,8,14,18,6,15,9,18,6,16,12,14,7,18],[9,13,16,15,5,9,16,18,8,0,18,7,10,10,13],[5,0,8,9,16,2,8,5,5,3,14,12,4,19,19],[6,13,10,5,0,15,9,3,8,13,6,3,12,17,16],[9,18,3,13,10,1,12,6,19,11,6,13,17,14,1],[19,2,10,15,11,13,16,3,14,6,9,7,17,6,11],[14,14,3,1,14,17,5,19,7,2,12,0,8,0,13],[7,14,11,4,6,3,15,0,17,5,18,7,8,18,8],[8,0,4,15,19,11,9,1,16,12,17,18,1,1,3],[3,2,1,11,9,19,10,10,12,1,19,9,7,5,8],[12,17,10,11,13,15,14,3,5,12,9,16,10,6,2],[1,17,6,18,2,8,16,7,6,16,18,14,2,5,19],[1,17,13,0,13,15,3,14,3,9,18,7,2,2,19],[3,14,4,12,3,8,19,9,0,11,7,1,14,1,13],[6,9,14,3,2,10,7,1,12,3,7,1,15,1,13],[0,18,19,5,14,0,12,4,19,11,13,19,12,16,4],[19,6,13,9,9,15,7,19,5,5,11,12,13,8,1],[7,4,4,1,15,4,12,18,1,1,8,16,19,16,1],[10,15,16,11,1,11,17,8,12,14,19,19,0,8,5],[0,8,8,8,7,19,3,6,9,10,11,9,12,2,2],[9,11,14,12,16,13,18,14,2,14,0,12,9,11,0],[3,16,0,15,1,9,1,0,12,3,10,12,5,18,4],[12,6,18,12,9,2,7,19,4,16,17,9,12,4,10]]
    Output = [[0,13],[0,14],[1,14],[2,13],[27,4],[28,1],[28,3],[29,0]]

#     heights = [[0, 2]]
#     Output = [[0,0], [0,1]]

    heights = [
[4,4,1,7,4,18,5,5,1,6,6,10,17,19,13,3,19],
[19,8,3,14,18,11,2,2,5,2,19,15,18,12,16,7,19],
[2,4,15,2,6,4,18,13,12,11,0,11,6,19,17,11,9],
[10,2,0,7,13,3,7,0,5,4,10,2,3,18,10,8,10],
[13,16,8,5,15,12,8,14,16,18,18,19,10,14,9,4,12],
[0,16,14,14,13,15,2,16,1,13,17,9,6,11,17,4,13],
[7,9,1,5,18,15,2,1,13,3,0,7,8,8,9,12,0],
[7,13,14,5,3,16,5,4,5,3,9,11,11,3,1,17,12],
[8,18,17,9,1,0,18,7,16,15,14,14,16,8,11,13,10],
[14,19,19,19,19,12,2,17,17,8,10,19,16,7,10,12,17],
[7,0,5,2,10,7,1,0,15,3,5,2,14,16,17,9,10],
[11,10,15,4,17,11,17,14,18,11,17,15,19,1,9,7,17],
[10,8,12,15,13,3,15,14,5,4,4,4,0,11,16,14,15],
[16,5,3,5,13,1,6,3,8,9,3,18,11,9,7,5,14],
[5,7,14,13,6,12,10,6,6,12,5,0,2,0,0,15,19],
[14,11,17,13,6,11,15,0,6,4,5,1,15,1,19,0,14],
[17,5,0,0,10,13,4,10,17,5,5,6,16,19,1,11,0],
[14,18,11,8,0,1,0,11,1,7,15,11,4,5,18,14,19],
[17,10,17,17,1,17,16,16,19,15,0,14,15,2,1,18,4],
[12,13,0,15,16,3,1,7,10,9,0,2,13,4,7,1,15],
[9,6,17,12,6,19,2,15,3,14,10,15,10,11,15,13,10],
[2,19,4,12,19,5,18,9,4,5,1,9,17,8,14,12,15],
[5,1,6,17,0,15,13,3,14,13,15,4,15,11,7,15,4],
[14,5,6,9,11,6,4,10,16,11,6,6,0,17,13,1,10],
[5,18,3,15,10,6,10,6,12,5,13,2,5,7,3,3,19],
[11,7,17,17,8,2,11,3,0,7,16,13,7,0,12,11,14],
[18,1,19,7,14,9,8,2,3,16,7,9,16,4,18,8,3],
[5,8,19,0,10,12,9,12,10,2,11,3,15,8,18,12,3],
[15,2,4,9,4,4,18,12,6,10,10,3,6,6,17,3,14],
[18,17,13,0,12,15,3,2,15,17,8,16,8,7,17,18,2],
[5,12,12,17,18,11,8,6,13,13,14,18,17,9,16,8,5],
[16,1,9,13,6,12,15,3,12,6,2,14,10,16,11,3,8],
[0,7,16,3,7,0,10,10,7,3,4,18,7,18,7,15,12],
[8,7,12,17,8,8,18,11,7,12,18,2,19,6,6,3,13],
[6,19,14,9,16,9,13,13,4,11,0,0,3,1,9,10,7],
[0,8,14,13,1,7,7,7,2,15,12,6,10,10,3,14,8],
[10,17,1,8,8,16,14,18,18,1,10,12,3,13,10,6,5],
[8,17,17,6,2,14,5,3,7,5,4,5,13,14,17,14,15],
[2,6,12,4,14,11,14,3,12,10,12,15,9,7,0,4,5],
[13,11,5,13,12,3,19,10,16,8,3,11,7,10,0,5,18],
[0,18,1,8,19,11,0,1,2,19,14,11,10,15,12,3,15]
]

    Output = [[0,16],[1,16],[2,13],[2,14],[2,15],[36,1],[37,1],[37,2],[38,2],[39,0],[39,1],[40,0],[40,1]]

#     heights = [
# [11,3,2,4,14,6,13,18,1,4,12,2,4,1,16],
# [5,11,18,0,15,14,6,17,2,17,19,15,12,3,14],
# [10,2,5,13,11,11,13,19,11,17,14,18,14,3,11],
# [14,2,10,7,5,11,6,11,15,11,6,11,12,3,11],
# [13,1,16,15,8,2,16,10,9,9,10,14,7,15,13],
# [17,12,4,17,16,5,0,4,10,15,15,15,14,5,18],
# [9,13,18,4,14,6,7,8,5,5,6,16,13,7,2],
# [19,9,16,19,16,6,1,11,7,2,12,10,9,18,19],
# [19,5,19,10,7,18,6,10,7,12,14,8,4,11,16],
# [13,3,18,9,16,12,1,0,1,14,2,6,1,16,6],
# [14,1,12,16,7,15,9,19,14,4,16,6,11,15,7],
# [6,15,19,13,3,2,13,7,19,11,13,16,0,16,16],
# [1,5,9,7,12,9,2,18,6,12,1,8,1,10,19],
# [10,11,10,11,3,5,12,0,0,8,15,7,5,13,19],
# [8,1,17,18,3,6,8,15,0,9,8,8,12,5,18],
# [8,3,6,12,18,15,10,10,12,19,16,7,17,17,1],
# [12,13,6,4,12,18,18,9,4,9,13,11,5,3,14],
# [8,4,12,11,2,2,10,3,11,17,14,2,17,4,7],
# [8,0,14,0,13,17,11,0,16,13,15,17,4,8,3],
# [18,15,8,11,18,3,10,18,3,3,15,9,11,15,15]
# ]
#     Outputs = [[0,14],[1,14],[2,14],[3,14],[4,13],[4,14],[5,14],[19,0]]



    # heights = [[1,1],[1,1]]
    # Output = [[0,0],[0,1],[1,0],[1,1]]
    sol = Solution()
    print(sol.pacificAtlantic(heights))
